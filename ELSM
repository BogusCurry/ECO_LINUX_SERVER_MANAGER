#!/bin/bash
#Add color for info.
green='\e[1;32m'
red='\e[0;31m'
yellow='\e[1;33m'

source /opt/ELSM/Files/conf.cfg


do_update() {
$INSTALL_LOC/Files/update.sh
}

do_no_menu_start() {
  if ! screen -list | grep -q "ECO"; then
     cd $DIR
     $START
  else
     echo "Server was found running... close it before running this"
  fi
  if ! screen -list | grep -q "WATCH"; then
     cd $INSTALL_LOC/Files/
     $WATCH_START
  fi
}

do_no_menu_stop() {
  if screen -list | grep -q "ECO"; then
    cd $DIR
    $STOP
    $WATCH_STOP
  else
     echo "No server was found to be running...did you start on?"
  fi
}


## Removed for now because it's untested...
#do_Qboot() {
#crontabs="/var/spool/cron/crontabs"
##Setup on boot requests.
#if (whiptail --fb --title "Start Server on bootup?" --yes-button "Yes" --no-button "No"  --yesno "Would You like the server to startup on boot?" 10 60) then
#    sed -i 's/startonboot=.*/startonboot=true/g' $CONFIG
#    sudo sed -i".bak" '/ELSM boot/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "@reboot ELSM boot") | crontab -
#else
#    sed -i 's/startonboot=.*/startonboot=false/g' $CONFIG
#    sudo sed -i".bak" '/ELSM boot/d' /var/spool/cron/crontabs/$USER
#fi
#}

#do_onboot() {
#    if [[ $startonboot = "true" ]]
#then
#  echo "Starting server"
#  cd $DIR
#  $START
#  if ! screen -list | grep -q "WATCH"; then
#     cd $INSTALL_LOC/Files/
#     $WATCH
#  fi
#else
#  echo "Set Onboot was not selected"
#fi
#exit 0
#}

#do_reload() {
#if ! screen -list | grep -q "ECO"; then
#    cd $DIR
#    $START
#    sed -i 's/check=.*/check=true/g' $CONFIG
#    if ! screen -list | grep -q "WATCH"; then
#    cd $INSTALL_LOC/Files/
#    $WATCH
#  fi
#fi
#exit 0
#}

#do_check() {
#  if [[ $check = "true" ]]
#then
#  do_reload
#fi
#exit 0
#}

##Time to include a restart command..
do_restart() {
if(whiptail --fb --title "Restart Eco Server?" --yes-button "Yes" --no-button "No"  --yesno "Would You like to restart Eco?" 10 60) then
	while true; do
		if screen -list | grep -q "ECO"; then
			$WATCH_STOP
			$STOP
			sleep 5
		else
			cd $DIR
			$START
			cd $INSTALL_LOC/Files/
			$WATCH_START
			break
		fi
done
else
echo "NOPE"
fi
}

CONFIGS="/opt/ELSM/Server/Configs"

do_write() {
#This stops jq from erasing a config file if the variable is empty.
if [ $CONFIG_OUTPUT ]; then
echo "config is not empty"
jq '.'${SUB_OPTION}' = '${CONFIG_OUTPUT}'' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
}

do_config_menu() {
echo $OPTION
RET=$?
if [ $RET -eq 0 ]; then
if [[ ! $OPTION = ""true"" && ! $OPTION = ""false"" ]]; then
CONFIG_OUTPUT=$(whiptail --fb --inputbox "$SEL Selected!" 10 80 $OPTION --title "$SEL Menu" 3>&1 1>&2 2>&3)
do_write
else
CONFIG_OUTPUT=$(whiptail --fb --yesno "$SEL: This only allows True or False, Currently set to: ($OPTION)" --yes-button "TRUE" --no-button "FALSE" 10 80 $OPTION --title "$SEL Menu" 3>&1 1>&2 2>&3)
fi
else
exit 1
fi
}

do_list_sel() {
SEL=$(whiptail --fb --menu "$NETWORKING Configs" 20 60 10  ${SEL[@]} 3>&1 1>&2 2>&3)
}


### List options that we want in simple edit.
do_start_config() {
##Get the lists!
unset FALLBACK NETWORKING SEL OPTION FILE
FALLBACK="do_start_config"
LIST=$(ls $DIR/Configs/ | awk -F. '{print $1" |"}')
SEL=$(whiptail --menu --fb "Configs Menu" 20 60 10 ${LIST[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
do_main_config
fi
}

do_world_size() {
SEL="WorldGenerator"
WG_SIZE=$(whiptail --fb --title "World Size" --radiolist "Choose: (Spacebar to select!)" 20 60 10\
  "Little_Big_Planet" "[20x20 World]" off \
  "1X (Default)" "[100x100 World]" on \
  "2X" "[140x140 World]" off \
  "4X" "[200x200 World]" off \
  3>&1 1>&2 2>&3)
if [ "$WG_SIZE" = "Little_Big_Planet" ]; then
jq '.Dimensions.x = "20"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "20"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
whiptail --msgbox --fb "Looking for more selectable options, if none are found you will enter Advanced editing" 20 60 0
fi
if [ "$WG_SIZE" = "1X (Default)" ]; then
jq '.Dimensions.x = "100"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "100"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
whiptail --msgbox --fb "Looking for more selectable options, if none are found you will enter Advanced editing" 20 60 0
fi
if [ "$WG_SIZE" = "2X" ]; then
jq '.Dimensions.x = "140"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "140"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
whiptail --msgbox --fb "Looking for more selectable options, if none are found you will enter Advanced editing" 20 60 0
fi
if [ "$WG_SIZE" = "4X" ]; then
jq '.Dimensions.x = "200"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "200"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
whiptail --msgbox --fb "Looking for more selectable options, if none are found you will enter Advanced editing" 20 60 0
fi
}

do_main_config() {
##Add this break until more files are editable
CONFIG_LIST=$(cat $INSTALL_LOC/Files/Config_mods.txt | grep "$SEL" | cut -d "=" -f2)
if [ ! $CONFIG_LIST ]; then
whiptail --msgbox --fb "This file currently is only supported for Advanced editing!" 10 60 0
nano $CONFIGS/$SEL.eco
$FALLBACK
else
echo "Entering sub_config"
do_sub_config
fi
}

do_sub_config() {
if (whiptail --fb --yesno "You have the option to edit this file one of two ways!" --yes-button "Simple" --no-button "Advanced" 10 80) then
do_simple
else
nano $CONFIGS/$SEL.eco
$FALLBACK
fi
}

do_simple() {
unset SUB_OPTION OPTION
CONFIG_LIST=$(cat $INSTALL_LOC/Files/Config_mods.txt | grep "$SEL" | cut -d "=" -f2)
SUB_OPTION=$(whiptail --fb --menu "$SEL Configs" 20 60 10  ${CONFIG_LIST[@]} 3>&1 1>&2 2>&3)
RET=$?
echo $CONFIG_LIST
echo $SUB_OPTION
if [ $RET -eq 0 ]; then
OPTION=$(jq .$SUB_OPTION $CONFIGS/$SEL.eco)
do_config_menu
do_simple
else
$FALLBACK
fi
}



do_first_run() {
(
        sleep 1
        echo XXX
        echo 20
#	do_start_config
        echo "Inputing user selection"
        echo XXX
        sleep 1
        echo XXX
        echo 40
	echo "Attemping to start server"
        echo XXX
        sleep 1
        echo XXX
        echo 50
        echo "LONG WAIT, UP TO 1HOUR!!!!"
	source /opt/ELSM/Files/conf.cfg
	cd $DIR
	$START
       echo XXX
        #Allow the server 1hour minutes to load..
        #If server doesn't go down, Force it.
	 for ((i=3600;i>0;i=i-1)); do
                clear
                ELSM_PID=$(lsof -Pi :$PORT -sTCP:LISTEN -t)
                if [ -z $ELSM_PID ]; then
#                echo -e ${yellow}"The ECO server is loading up for the first time!, Depending on your machine this could take A LONG TIME.. Please wait..."
                echo -n "Time Remaining $i seconds, Before Failure.."
               	if ! screen -list | grep -q "ECO"; then
                	clear
                	echo "For some reason your server failed to load and has crashed.... Please report this to the forum and attemt to run it manually to find clues..."
                	exit 1
                fi
               sleep 1
              else
               break
              fi
              done
	if ! screen -list | grep -q "WATCH"; then
		cd $INSTALL_LOC/Files/
		$WATCH_START
	fi
	echo 60
        echo XXX
        echo 80
        echo "The sun is rising."
        echo XXX
        sleep 2
        echo XXX
        echo 100
        echo "Finishing up."
        echo XXX
        sleep 2
) | whiptail --gauge "Gathering info" 8 40 0
##Leave the script so we don't confuse users and attempt to start it after it's all ready up.
INTERNAL_IP=$(hostname -I | awk '{print $1}')
whiptail --msgbox --fb "Ok your server should be live for you to play now. Also don't forget to check out the WebUI at: $INTERNAL_IP:3001" 20 60 0
clear
echo -e ${green}"Ok your server should be live for you to play now. Also don't forget to check out the WebUI at: $INTERNAL_IP:3001"
echo -e ${yellow}"To run the ECO_LINUX_SERVER_MANAGER interface just type ${red}ELSM${yellow} in your terminal"
tput sgr0
exit 0
}

#GUI Menu Starts here!

do_start() {
 if ! screen -list | grep -q "ECO"; then
    cd $DIR
    $START
    whiptail --fb --msgbox "Your Server is loading up please check the client after a bit of time..." 20 60 1
else
    whiptail --fb --msgbox "Found a server running please stop it first!" 20 60 1
    do_Qstop
fi
if ! screen -list | grep -q "WATCH"; then
     cd $INSTALL_LOC/Files/
     $WATCH_START
fi
}


do_stop() {
  if ! screen -list | grep -q "ECO"; then
    whiptail --fb --msgbox "There is no Server running right now, did you start it?" 20 60 1
else
    do_Qstop
fi
}

do_Qstop() {
 whiptail --fb --yesno "Did you want to stop the server?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    $STOP
    $WATCH_STOP
    whiptail --fb --msgbox "Stopping Server.." 20 60 1
  fi
}



do_install() {
###Grab a list and see what we can do with it##
##Currently using a set list to allow users to add versions until a more reliable method can be made to automate this again.

cd $INSTALL_LOC
eco_server_list=$(cat $INSTALL_LOC/Files/ServerVersions.txt | awk '{print $1 " |"}')

SELECTED_VERSION=$(whiptail --menu --fb "Select Your ECO server." 20 60 10 ${eco_server_list[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then  
exit 1
elif [ $RET -eq 0 ]; then
dl_link=$(echo "https://s3-us-west-2.amazonaws.com/eco-releases/$SELECTED_VERSION-beta.zip")
fi

r=$(wget $dl_link -O $DIR/$SELECTED_VERSION-beta.zip)
if [ $? -ne 0 ]; then
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
The current link is: $dl_link" 20 60
fi

cd $DIR
#Grab avalible download versions from site (Linux Server only)
unzip $SELECTED_VERSION-beta.zip
rm $SELECTED_VERSION-beta.zip
sed -i 's/ECO_VERSION=.*/ECO_VERSION='$SELECTED_VERSION'/g' $INSTALL_LOC/Files/conf.cfg
do_world_size
do_start_config
do_first_run
}


do_menu() {
##Simple check to make sure there is actually a server built##
##############################################################
wget -q https://raw.githubusercontent.com/kicker22004/ECO_LINUX_SERVER_MANAGER/master/Files/ServerVersions.txt -O $INSTALL_LOC/Files/ServerVersions.txt
if [ ! -f $DIR/EcoServer.exe ]; then
do_install
fi
do_update
source /opt/ELSM/Files/conf.cfg
while true; do
  FUN=$(whiptail --fb --title "Main Menu, Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 8 \
    "1 Start" "[Attempts to start the server]" \
    "2 Stop" "[Attempt to stop the server]" \
    "3 Restart" "[Restart the server]" \
    "4 Configs" "[Allows you to make changes to config files]" \
    "5 Info" "[Fast information about the server.]" \
  3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_start ;;
      2\ *) do_stop ;;
      3\ *) do_restart ;;
      4\ *) do_start_config ;;
      5\ *) do_info ;;
 *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}


do_info(){
if screen -list | grep -q "ECO"; then
STATUS="ONLINE"
else
STATUS="OFFLINE"
fi
on_now=$(ss -t | grep -o "$PORT" | wc -l)
#Calculate accurate CPU usage.
cpufree=$(mpstat 1 1 | tail -n 1 | awk '{printf $12}')
CPU=$(echo "scale=1; x=100-$cpufree; if(x<1) print 0; x" | bc)
#Gather Internal and External IP
EXTERNAL_IP=$(/usr/bin/curl -s http://mdrjr.net/ip.php)
INTERNAL_IP=$(hostname -I | awk '{print $1}')
ELSM_PID=$(lsof -Pi :$PORT -sTCP:LISTEN -t)
UPTIME=$(ps -o etime= -p $ELSM_PID)
LOAD=$(uptime | grep -o "load average.*")
RAM=$(free -mh | grep Mem | awk '{print $4}')
RAM_TOTAL=$(free -mh | grep "Mem" | awk '{print $2}')
TOTAL=$(du -sh $DIR | awk '{print $1}')
HDD_TOTAL=$(df -kh . | grep / | awk '{print $4}')
MONO_VERSION=$(mono -V | grep version.* | cut -d " " -f 5)
whiptail --fb --clear --title "Current server stats" --yesno --yes-button REFRESH --no-button Back \
"Server Status: $STATUS \n
ELSM Version: $ELSM_VERSION \n
Start on Boot: $startonboot \n
Server Version: $ECO_VERSION \n
Current Players Online: $on_now \n
CPU Usage is: $CPU% \n
Server Uptime: $UPTIME \n
$LOAD \n
Ram Available: "$RAM\B"(Free/Total)"$RAM_TOTAL\B" \n
Server size on disk: $TOTAL(Used/Free)$HDD_TOTAL \n
Your Mono Version is: $MONO_VERSION \n
IP: $INTERNAL_IP | Remote IP: $EXTERNAL_IP" 35 55 10
CHOICES=$?
unset TOTAL on_list CPU LOAD UPTIME RAM STATUS
  if [ $CHOICES -eq 0 ]; then
   	do_info
fi
clear
}



case "$1" in
  (help)
    do_help
    exit 0
    ;;
  (start)
    do_no_menu_start
    exit 0
    ;;
  (stop)
    do_no_menu_stop
    exit 0
    ;;
 (info)
   do_info
    exit 0
    ;;
 (restart)
   do_restart
    exit 0
    ;;
   (*)
   do_menu
   exit 0
    ;;
esac 
