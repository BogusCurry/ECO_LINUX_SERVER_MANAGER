#!/bin/bash
#Add color for info.
green='\e[1;32m'
red='\e[0;31m'
yellow='\e[1;33m'

source /opt/ELSM/Files/conf.cfg

do_update() {
$INSTALL_LOC/Files/update.sh
}

do_no_menu_start() {
  if ! screen -list | grep -q "ECO"; then
     cd $DIR
     $START
     sed -i 's/check=.*/check=true/g' $CONFIG
  else
     echo "Server was found running... close it before running this"
  fi
}

do_no_menu_stop() {
  if screen -list | grep -q "ECO"; then
    sed -i 's/check=.*/check=false/g' $CONFIG
    cd $DIR
    $STOP
  else
     echo "No server was found to be running...did you start on?"
  fi
}

do_Qboot() {
crontabs="/var/spool/cron/crontabs"
##Setup on boot requests.
if (whiptail --fb --title "Start Server on bootup?" --yes-button "Yes" --no-button "No"  --yesno "Would You like the server to startup on boot?" 10 60) then
    sed -i 's/startonboot=.*/startonboot=true/g' $CONFIG
    sudo sed -i".bak" '/ELSM boot/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "@reboot ELSM boot") | crontab -
else
    sed -i 's/startonboot=.*/startonboot=false/g' $CONFIG
    sudo sed -i".bak" '/ELSM boot/d' /var/spool/cron/crontabs/$USER
fi
}

do_onboot() {
    if [[ $startonboot = "true" ]]
then
  echo "Starting server"
  cd $DIR
  $START
else
  echo "Set Onboot was not selected"
fi
exit 0
}

do_reload() {
if ! screen -list | grep -q "ECO"; then
    cd $DIR
    $START
    sed -i 's/check=.*/check=true/g' $CONFIG
fi
exit 0
}

do_check() {
  if [[ $check = "true" ]]
then
  do_reload
fi
exit 0
}

do_first_run() {
(
        sleep 1
        echo XXX
        echo 20
        echo "Inputing user selection"
        echo XXX
        sleep 1
        echo XXX
        echo 40
	echo "Attemping to start server"
        echo XXX
        sleep 1
        echo XXX
        echo 50
        echo "LONG WAIT, UP TO 1HOUR!!!!"
	source /opt/ELSM/Files/conf.cfg
	cd $DIR
	$START
       echo XXX
        #Allow the server 1hour minutes to load..
        #If server doesn't go down, Force it.
	 for ((i=3600;i>0;i=i-1)); do
                clear
                port=$(lsof -Pi :3000 -sTCP:LISTEN -t)
                if [ -z $port ]; then
#                echo -e ${yellow}"The ECO server is loading up for the first time!, Depending on your machine this could take A LONG TIME.. Please wait..."
                echo -n "Time Remaining $i seconds, Before Failure.."
               	if ! screen -list | grep -q "ECO"; then
                	clear
                	echo "For some reason your server failed to load and has crashed.... Please report this to the forum and attemt to run it manually to find clues..."
                	exit 1
                fi
               sleep 1
              else
               break
              fi
              done
	echo 60
        echo XXX
        echo 80
        echo "The sun is rising."
        echo XXX
        sleep 2
        echo XXX
        echo 100
        echo "Finishing up."
        echo XXX
        sleep 2
) | whiptail --gauge "Gathering info" 8 40 0
##Leave the script so we don't confuse users and attempt to start it after it's all ready up.
INTERNAL_IP=$(ifconfig $NETIF | grep 'inet addr:'| cut -d: -f2 | awk '{ print $1}')
whiptail --msgbox --fb "Ok your server should be live for you to play now. Also don't forget to check out the WebUI at: $INTERNAL_IP:3001" 20 60 0
clear
echo -e ${green}"Ok your server should be live for you to play now. Also don't forget to check out the WebUI at: $INTERNAL_IP:3001"
echo -e ${yellow}"To run the ECO_LINUX_SERVER_MANAGER interface just type ${red}ELSM${yellow} in your terminal"
tput sgr0
exit 0
}

#GUI Menu Starts here!

do_start() {
 if ! screen -list | grep -q "ECO"; then
    cd $DIR
    $START
    sed -i 's/check=.*/check=true/g' $CONFIG
    whiptail --fb --msgbox "Your Server is loading up please check the client after a bit of time..." 20 60 1
else
    whiptail --fb --msgbox "Found a server running please stop it first!" 20 60 1
    do_Qstop
fi
}


do_stop() {
  if ! screen -list | grep -q "ECO"; then
    whiptail --fb --msgbox "There is no Server running right now, did you start it?" 20 60 1
else
    do_Qstop
fi
}

do_Qstop() {
 whiptail --fb --yesno "Did you want to stop the server?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    sed -i 's/check=.*/check=false/g' $CONFIG
    $STOP
    whiptail --fb --msgbox "Stopping Server.." 20 60 1
  fi
}



do_install() {
###Grab a list and see what we can do with it##
cd $INSTALL_LOC
wget https://s3-us-west-2.amazonaws.com/eco-releases -O eco.html
himalaya eco.html eco.json
eco_server_list=$(cat eco.json | grep -o "EcoServer.*-alpha.zip" | sort -Vr | cut -d "-" -f1 | awk '{print $1 " |"}')

SELECTED_VERSION=$(whiptail --menu --fb "Select Your ECO server." 20 60 10 ${eco_server_list[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then  
exit 1
elif [ $RET -eq 0 ]; then
dl_link=$(echo "https://s3-us-west-2.amazonaws.com/eco-releases/$SELECTED_VERSION-alpha.zip")
fi

r=$(wget $dl_link -O $DIR/$SELECTED_VERSION-alpha.zip)
if [ $? -ne 0 ]; then
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
The current link is: $dl_link" 20 60
fi

cd $DIR
#Grab avalible download versions from site (Linux Server only)
#wget https://s3-us-west-2.amazonaws.com/eco-releases/$SELECTED_VERSION-alpha.zip
unzip $SELECTED_VERSION-alpha.zip
rm $SELECTED_VERSION-alpha.zip
do_first_run
}


do_menu() {
##Simple check to make sure there is actually a server built##
##############################################################
if [ ! -f $DIR/EcoServer.exe ]; then
do_install
fi
do_update
source /opt/ELSM/Files/conf.cfg
while true; do
  FUN=$(whiptail --fb --title "Main Menu, Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 8 \
    "1 Start" "[Attempts to start the server]" \
    "2 Stop" "[Attempt to stop the server]" \
  3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_start ;;
      2\ *) do_stop ;;
 *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}

case "$1" in
  (help)
    do_help
    exit 0
    ;;
  (start)
    do_no_menu_start
    exit 0
    ;;
  (stop)
    do_no_menu_stop
    exit 0
    ;;
   (*)
   do_menu
   exit 0
    ;;
esac 
